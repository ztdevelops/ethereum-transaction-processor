services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.3
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 2181 || exit -1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.6.3
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy

  db:
    image: mongo:8.0.3
    healthcheck:
      test: [ "CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb-data:/data/db

  db-indexing-sidecar:
    build:
      context: ./mongodb-indexing-sidecar/
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  transactions-realtime:
    build:
      context: transactions-realtime/
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      broker:
        condition: service_healthy

  transactions-historical:
    build:
      context: transactions-historical/
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: on-failure
    depends_on:
      broker:
        condition: service_healthy

  message-consumer:
    build:
      context: ./message-consumer/
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_healthy
      db-indexing-sidecar:
        condition: service_completed_successfully

  endpoint-server:
    build:
      context: ./endpoint-server/
      dockerfile: Dockerfile
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/api/v1/transactions/healthz" ]
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      db-indexing-sidecar:
        condition: service_completed_successfully
    ports:
      - "8000:8000"

volumes:
  mongodb-data: